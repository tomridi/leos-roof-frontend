---
import Layout from '../../layouts/Layout.astro';
import type { ServiceDoc, ServiceCategory, MediaAsset } from '../../types/payload.ts';

import { RichText } from '@payloadcms/richtext-lexical/react';
import { slugify } from '../../utils/slugify';

//Import Components
import EmergencyCall from '../../components/EmergencyCall.astro';
import Testimonial from '../../components/Testimonial.astro';
import Slideshow from '../../components/Slideshow';

export async function getStaticPaths() {
    
    const PAYLOAD_BASE_URL: string = import.meta.env.PUBLIC_PAYLOAD_API_URL;
    const PAYLOAD_SERVICES_API_ENDPOINT: string = `${PAYLOAD_BASE_URL}/services?depth=2`;

    try {
        const response = await fetch(PAYLOAD_SERVICES_API_ENDPOINT);
        
        if (!response.ok) {
            throw new Error(`Failed to fetch services: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        const services: ServiceDoc[] = data.docs;

        return services.map((service) => ({
            params: { slug: slugify(service.title) },
            props: { 
                service : {
                    id: service.id,
                    title: service.title,
                    description: service.description,
                    callToActionHighlighted: service.callToActionHighlighted,
                    callToAction: service.callToAction,
                    content01: service.content01,
                    content02: service.content02,
                    coverImage: service.coverImage as MediaAsset,
                    gallery: service.gallery.map(item => ({
                        image: item.image as MediaAsset,
                        caption: item.caption || '',
                    }))
                },
            },
            allServices: services.map(s => ({
                id: s.id,
                title: s.title,
                serviceCategory: s.serviceCategory,
            })), // for Previous/Next
        }));

    } catch (error) {
        console.error('Error fetching services:', error);
        return [];

    }
}

const { service } = Astro.props;
const { id, title, description, callToAction, callToActionHighlighted, content01, content02, coverImage } = service;

const coverImageAlt = coverImage.alt;
const coverImageUrl = coverImage.url;

const slideshowImages = service.gallery.map(item => ({
  src: item.image.url,
  alt: item.caption || service.title,
}));


//SEO CONFIG PAGE BY PAGE
const pagetitle = `${service.title} `;
const pagedescription = `${service.description} ` || "Learn more about our services at Leo's Roofing & Remodeling.";

---
<Layout title={pagetitle} description={pagedescription}>
    <section class="flex flex-col bg-gray-light pt-10 md:pt-25">
        <div class="flex-grow container mx-auto
        text-left px-4 md:px-0 py-15 
        content-start">
            <h1 class="font-thin text-2xl md:text-4xl max-w-3/4">
               {title}
            </h1>

            <div class="mt-7 md:mt-10 md:bg-white">
                <div class="h-[300px] md:h-[430px] w-auto overflow-hidden">
                    <Slideshow images={slideshowImages} interval={4000} arrows={true} custom_arrows={false} caption={false} bullets={true} client:load />
                </div>
            </div>

            <div class="bg-white mt-8 mb-8 md:mb-0 md:mt-0 py-5 md:py-10 px-3 md:px-20 prose">
                <RichText data={content01} />
            </div>


            <div class="h-[240px] md:h-[445px] overflow-hidden">
                    <img src={coverImageUrl} alt={coverImageAlt} class="w-full h-full object-cover object-center " loading="lazy">
            </div>

            {content02 && (
                <div class="bg-white mt-8 mb-8 md:mb-0 md:mt-0 py-5 md:py-10 px-3 md:px-20">
                    <RichText data={content02} />
                </div>
            )}
             {callToAction && (
                <div class="bg-light-blue py-5 md:py-10 px-3 md:px-20">
                     <span class="font-semibold mb-5 block">{callToActionHighlighted}</span>
                    {callToAction}
                </div>
            )}
            
            <div class="flex justify-between text-sm md:text-3xl font-thin mt-10">
               <a href="#" class="hover:text-background flex items-center">
                    <div class="cursor-pointer pr-3 md:pr-5">
                        <svg class="h-4 md:h-8 w-auto" viewBox="0 0 35 31" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0 15.4967L35 0V31L0 15.4967Z" fill="currentColor"/>
                        </svg>
                    </div>
                    <div>Previous</div>
                </a>
                <a href="#" class="hover:text-background flex items-center">
                    <div class="pr-3 md:pr-5">Next</div>
                    <div class="cursor-pointer">
                        <svg class="h-4 md:h-8 w-auto" viewBox="0 0 35 31" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0 31V0L35 15.4967" fill="currentColor"/>
                        </svg>
                    </div>
                </a>
            </div>

        </div>
    </section>
    <EmergencyCall />
    <Testimonial />
</Layout>