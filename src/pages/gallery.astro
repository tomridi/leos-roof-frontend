---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import GalleryClient from '../components/GalleryClient.jsx';

// SEO CONFIG
const pagetitle = "Gallery";
const description = "Explore Our Work: Roofing & Renovation Gallery";

// Import your custom types
import type { PayloadResponse, GalleryDoc, TransformedImage, TransformedCategory } from '../types/payload'; // Adjust path if you named your types file differently

// --- START: FETCH DATA FROM PAYLOAD ---
const PAYLOAD_BASE_URL: string = import.meta.env.PUBLIC_PAYLOAD_API_URL || "http://localhost:3000";
const PAYLOAD_API_ENDPOINT: string = `${PAYLOAD_BASE_URL}/galleries?depth=2&sort=createdAt&limit=0`;

// Initialize variables with their correct types
let transformedImages: TransformedImage[] = [];
let transformedCategories: TransformedCategory[] = [{ name: 'All Categories', slug: 'all' }];
let fetchedPayloadData: PayloadResponse<GalleryDoc>; // Declare without initializing to avoid `never` initially

try {
  const response = await fetch(PAYLOAD_API_ENDPOINT);

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  fetchedPayloadData = await response.json() as PayloadResponse<GalleryDoc>;

  fetchedPayloadData.docs.forEach(galleryCategory => {
    transformedCategories.push({
      name: galleryCategory.title,
      slug: galleryCategory.slug
    });

    galleryCategory.images.forEach(galleryImageEntry => {
      if (galleryImageEntry.image && typeof galleryImageEntry.image === 'object' && galleryImageEntry.image.url) {
        transformedImages.push({
          id: galleryImageEntry.image.id, // Accessing .id on MediaAsset
          src: galleryImageEntry.image.url, // Accessing .url on MediaAsset
          category: galleryCategory.slug,
          alt: galleryImageEntry.image.alt || galleryImageEntry.caption || galleryCategory.title
        });
      }
    });
  });

} catch (error) {
  console.error("Failed to fetch gallery data from Payload:", error);
  transformedImages = [];
  transformedCategories = [{ name: 'All Categories', slug: 'all' }];
}

// Categories data for columns (using the dynamically fetched categories)
const columns = [
  transformedCategories.slice(0, 1), // "All Categories"
  transformedCategories.slice(1, 4), // 2 items
  transformedCategories.slice(4, 7), // 2 more
  transformedCategories.slice(7)     // Remaining items (if any)
];
---

<Layout title={pagetitle} description={description}>
  {/* Pass the dynamically fetched and transformed data to the client component */}
  <GalleryClient client:load images={transformedImages} categories={transformedCategories} columns={columns} />
</Layout>