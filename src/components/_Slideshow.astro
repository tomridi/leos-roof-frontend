---
// src/components/Slideshow.astro
const { images = [], interval = 5000 } = Astro.props;
---

<div class="relative w-full h-96 overflow-hidden rounded-lg">
  <div id="slideshow-container" class="relative h-full">
    {images.map((image, index) => (
      <div 
        class={`absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
        data-slide
      >
        <img 
          src={image.src} 
          alt={image.alt} 
          class="w-full h-full object-cover"
          loading="lazy"
        />
        {image.caption && (
          <div class="absolute bottom-0 left-0 right-0 bg-black/50 text-white p-4">
            {image.caption}
          </div>
        )}
      </div>
    ))}
  </div>

  <!-- Navigation dots -->
  <div class="absolute bottom-4 left-0 right-0 flex justify-center gap-2">
    {images.map((_, index) => (
      <button
        class={`w-3 h-3 rounded-full ${index === 0 ? 'bg-white' : 'bg-white/50'}`}
        aria-label={`Go to slide ${index + 1}`}
        data-dot
        data-index={index}
      ></button>
    ))}
  </div>

  <!-- Previous/Next buttons -->
  <button class="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full" data-prev>
    &larr;
  </button>
  <button class="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full" data-next>
    &rarr;
  </button>
</div>

<script is:inline>
  (function() {
    // Get all elements
    const container = document.currentScript.closest('div').querySelector('#slideshow-container');
    const slides = container.querySelectorAll('[data-slide]');
    const dots = document.querySelectorAll('[data-dot]');
    const prevBtn = document.querySelector('[data-prev]');
    const nextBtn = document.querySelector('[data-next]');
    
    // Config
    const slideInterval = 5000;
    let currentIndex = 0;
    let intervalId;

    // Show specific slide
    function showSlide(index) {
      slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-100', i === index);
        slide.classList.toggle('opacity-0', i !== index);
      });
      dots.forEach((dot, i) => {
        dot.classList.toggle('bg-white', i === index);
        dot.classList.toggle('bg-white/50', i !== index);
      });
      currentIndex = index;
    }

    // Next slide action
    function nextSlide() {
      showSlide((currentIndex + 1) % slides.length);
    }

    // Previous slide action
    function prevSlide() {
      showSlide((currentIndex - 1 + slides.length) % slides.length);
    }

    // Start the automatic slideshow
    function startInterval() {
      intervalId = setInterval(nextSlide, slideInterval);
    }

    // Reset interval when user interacts
    function resetInterval() {
      clearInterval(intervalId);
      startInterval();
    }

    // Initialize
    if (slides.length > 0) {
      showSlide(0);
      startInterval();

      // Event listeners
      nextBtn?.addEventListener('click', () => {
        nextSlide();
        resetInterval();
      });

      prevBtn?.addEventListener('click', () => {
        prevSlide();
        resetInterval();
      });

      dots.forEach(dot => {
        dot.addEventListener('click', () => {
          showSlide(parseInt(dot.dataset.index));
          resetInterval();
        });
      });

      // Pause on hover
      container.addEventListener('mouseenter', () => clearInterval(intervalId));
      container.addEventListener('mouseleave', startInterval);
    }
  })();
</script>