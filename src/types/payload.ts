// src/types/payload.ts (or src/types/gallery.ts)

//GALLERIES TYPES
export interface MediaAsset {
  id: number;
  alt: string;
  url: string;
  filename: string;
  mimeType: string;
  height: number;
  width: number;
  caption?: string | null;
  // Add other properties you might use, like 'sizes', 'filename', etc., if needed
  // sizes?: {
  //   thumbnail?: { url: string; width: number; height: number; mimeType: string; filesize: number; filename: string };
  //   // ... other sizes
  // };
}

export interface GalleryImageEntry {
  id: string; // This is the relationship ID generated by Payload for array items
  image: MediaAsset; // The actual MediaAsset object, populated due to depth=2
  caption: string | null;
}

export interface GalleryDoc {
  id: number;
  title: string;
  slug: string;
  images: GalleryImageEntry[]; // Array of GalleryImageEntry
  updatedAt: string;
  createdAt: string;
}

// Generic interface for Payload's paginated API responses
export interface PayloadResponse<T> {
  docs: T[];
  totalDocs: number;
  limit: number;
  page: number;
  totalPages: number;
  nextPage: number | null;
  prevPage: number | null;
  hasNextPage: boolean;
  hasPrevPage: boolean;
  pagingCounter: number;
}

// Interface for the transformed image data in GalleryClient.jsx
export interface TransformedImage {
  id: number;
  src: string;
  category: string; // This will be the gallery doc's slug
  alt: string;
}

// Interface for the transformed category data in GalleryClient.jsx
export interface TransformedCategory {
  name: string;
  slug: string;
}


//SERVICES TYPES

export interface ServiceCategory {
  id: number;
  title: string;
  description: string | null;
  updatedAt: string;
  createdAt: string;
}

export interface ServiceCategoryDoc {
  id: number;
  title: string;
  description: string | null;
  backgroundImage?: MediaAsset; 
  backgroundColor?: string; 
}

export interface ServiceDoc {
  id: number;
  serviceCategory: ServiceCategory;
  title: string;
  description: string;
  svgIconCode: string;
  content01: any;
  content02: any | null;
  coverImage?: MediaAsset;
  callToActionHighlighted?: string | null;
  callToAction: string | null; 
  gallery: { id: string; image: MediaAsset; caption: string | null }[];
  updatedAt: string;
  createdAt: string;
}

export interface ServicesTabItem {
  href: string; // This will likely be dynamically generated for individual service pages
  title: string;
  description: string;
  svg: string; // The SVG code string
  image?: string; // <<< This will hold the URL for the cover image (from ServiceDoc.coverImage.url) >>>
}

export interface ServicesTab {
  label: string; // e.g., "Roofing Services", "Remodeling Services"
  bgImage?: string;
  bgColor: string;
  items: ServicesTabItem[];
}

//LOCATION

export interface Locations {
  id: number;
  title: string;
  introMain: string;
  intro: any;
  description: any;
  do: any; // Using 'any' for RichText for simplicity, but you can define a proper RichText type if needed
  dont: any | null;
  coverImage?: MediaAsset;
  thumbnail?: MediaAsset; 
  gallery: { id: string; image: MediaAsset; caption: string | null }[];
  updatedAt: string;
  createdAt: string;
}