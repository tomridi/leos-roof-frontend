---
// src/components/ServicesHomepage.astro
export const prerender = false;

import ServicesTabs from './ServicesTabs.tsx';
import type { PayloadResponse, ServiceDoc, ServicesTab, ServicesTabItem, ServiceCategoryDoc, MediaAsset } from '../types/payload'; // Make sure to import ServiceCategoryDoc

import { slugify } from '../utils/slugify'; 

const PAYLOAD_BASE_URL: string = import.meta.env.PUBLIC_PAYLOAD_API_URL;
const API_ENDPOINT: string = `${PAYLOAD_BASE_URL}/services?depth=2`;

let transformedTabs: ServicesTab[] = [];
let fetchError: string | null = null; // Add fetchError state

try {

  const response = await fetch(API_ENDPOINT);

  //console.log("API Response Status (from ServicesHomepage.astro):", response.status, response.statusText);

  if (!response.ok) {
    const errorBody = await response.text();
    console.error(`HTTP error from ServicesHomepage.astro! Status: ${response.status}. Message: ${response.statusText}. Response Body: ${errorBody}`);
    throw new Error(`Failed to fetch services: ${response.status} ${response.statusText}`);
  }

  const fetchedPayloadData: PayloadResponse<ServiceDoc> = await response.json() as PayloadResponse<ServiceDoc>;

  if (!fetchedPayloadData.docs || fetchedPayloadData.docs.length === 0) {
    console.warn("Fetched data has no 'docs' array or the 'docs' array is empty (from ServicesHomepage.astro).");
  } else {
    console.log(`Successfully fetched ${fetchedPayloadData.docs.length} service documents (from ServicesHomepage.astro).`);
  }

  const categorizedServicesMap = new Map<string, { categoryData: ServiceCategoryDoc, items: ServicesTabItem[] }>();

  fetchedPayloadData.docs.forEach(service => {
    const categoryTitle = service.serviceCategory.title;
    const categoryData = service.serviceCategory;

    if (!categorizedServicesMap.has(categoryTitle)) {
      categorizedServicesMap.set(categoryTitle, { categoryData: categoryData, items: [] });
      console.log(`Initialized new category array for: "${categoryTitle}" (from ServicesHomepage.astro)`);
    }

    categorizedServicesMap.get(categoryTitle)?.items.push({
      href: `/services/${slugify(service.title)}`,
      title: service.title,
      description: service.description  || '',
      svg: service.svgIconCode  || '',
    });
  });

  transformedTabs = Array.from(categorizedServicesMap.entries()).map(([categoryLabel, data]) => {
    // Use the actual category data fetched from Payload
    const bgImage = data.categoryData.backgroundImage?.url; // Access the URL from the media object
    const bgColor = data.categoryData.backgroundColor;

    return {
      label: categoryLabel,
      bgImage: bgImage || "/images/default-bg.webp", // Still keep a sensible fallback in case CMS data is missing
      bgColor: bgColor || "#cccccc", // Still keep a sensible fallback
      items: data.items,
    };
  });

} catch (error) {
  console.error("An error occurred during services data fetching or transformation in ServicesHomepage.astro:", error);
  transformedTabs = [];
}
---

<section>
  {transformedTabs.length > 0 ? (
    <ServicesTabs tabs={transformedTabs} client:load />
  ) : (
    <p class="text-center text-lg mt-10">No services available at this time.</p>
  )}
</section>