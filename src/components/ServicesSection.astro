---
export const prerender = false;
// src/components/ServicesSection.astro
// This component fetches and transforms services data into a tab-friendly format.

import ServicesGrid from './ServicesGrid.tsx'; // Ensure this path is correct
import type { PayloadResponse, ServiceDoc, ServicesTab, ServicesTabItem, ServiceCategoryDoc } from '../types/payload';

import { slugify } from '../utils/slugify';

const PAYLOAD_BASE_URL: string = import.meta.env.PUBLIC_PAYLOAD_API_URL || "http://localhost:3000";
const PAYLOAD_SERVICES_API_ENDPOINT: string = `${PAYLOAD_BASE_URL}/services?depth=2`;


let transformedTabs: ServicesTab[] = [];
let fetchError: string | null = null; // Add fetchError state

try {

  const response = await fetch(PAYLOAD_SERVICES_API_ENDPOINT);

  if (!response.ok) {
    const errorBody = await response.text();
    fetchError = `HTTP error from ServicesSection.astro! Status: ${response.status}. Message: ${response.statusText}. Response Body: ${errorBody}`;
    console.error(fetchError);
  } else {
    const fetchedPayloadData: PayloadResponse<ServiceDoc> = await response.json() as PayloadResponse<ServiceDoc>;

    const categorizedServicesMap = new Map<string, { categoryData: ServiceCategoryDoc, items: ServicesTabItem[] }>();

    fetchedPayloadData.docs.forEach(service => {

      const categoryTitle = service.serviceCategory.title;
      const categoryData = service.serviceCategory; // Get the full category object (should be ServiceCategoryDoc now)

      if (!categorizedServicesMap.has(categoryTitle)) {
        categorizedServicesMap.set(categoryTitle, { categoryData: categoryData, items: [] });
        console.log(`Initialized new category array for: "${categoryTitle}" (from ServicesSection.astro)`);
      }

      categorizedServicesMap.get(categoryTitle)?.items.push({
        href: `/services/${slugify(service.title)}`, // Assuming individual service pages exist
        title: service.title,
        description: service.description,
        svg: service.svgIconCode,
        image: service.coverImage?.url || '/images/default-cover-image.webp',
      });
    });

    // Convert the Map into the ServicesTab[] format
    transformedTabs = Array.from(categorizedServicesMap.entries()).map(([categoryLabel, data]) => {
      const bgColor = data.categoryData.backgroundColor;

      return {
        label: categoryLabel,
        bgColor: bgColor || "#cccccc", // Fallback for color
        items: data.items,
      };
    });

  }

} catch (error) {
  fetchError = `An error occurred during services data fetching or transformation in ServicesSection.astro: ${error instanceof Error ? error.message : String(error)}`;
  console.error(fetchError);
  transformedTabs = [];
}
---

<section>
  {fetchError ? (
    <p class="text-center text-lg mt-10 text-red-600">{fetchError}</p>
  ) : transformedTabs.length > 0 ? (
    <ServicesGrid tabs={transformedTabs} client:load />
  ) : (
    <p class="text-center text-lg mt-10">No services available at this time.</p>
  )}
</section>